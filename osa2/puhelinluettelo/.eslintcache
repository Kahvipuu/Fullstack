[{"C:\\Aarne\\Koulu\\fullstack\\osa2\\puhelinluettelo\\src\\index.js":"1","C:\\Aarne\\Koulu\\fullstack\\osa2\\puhelinluettelo\\src\\App.js":"2","C:\\Aarne\\Koulu\\fullstack\\osa2\\puhelinluettelo\\src\\reportWebVitals.js":"3","C:\\Aarne\\Koulu\\fullstack\\osa2\\puhelinluettelo\\src\\services\\persons.js":"4"},{"size":154,"mtime":1613029600906,"results":"5","hashOfConfig":"6"},{"size":7173,"mtime":1613748040035,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":428,"mtime":1613639990967,"results":"10","hashOfConfig":"6"},{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"1jxxoz3",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"13"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1e6a26w",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},"C:\\Aarne\\Koulu\\fullstack\\osa2\\puhelinluettelo\\src\\index.js",[],["22","23"],"C:\\Aarne\\Koulu\\fullstack\\osa2\\puhelinluettelo\\src\\App.js",["24"],"import React, { useEffect, useState } from 'react'\nimport personService from './services/persons'\nimport './index.css'\n\nconst Filter = (props) => {\n  console.log('filter:', props.nameFilter, 'handler', props.handleFilterChange)\n  return (\n    <div>\n      <form>\n        filter: <input\n          value={props.nameFilter}\n          onChange={props.handleFilterChange}\n        ></input>\n      </form>\n    </div>\n  )\n}\n\nconst SubmitForm = (props) => {\n  //Varmaan tästä toivottaisiin jotain hieman paremmin jaoteltua kokonaisuutta...\n  console.log('subForm', props);\n  return (\n    <div>\n      <form onSubmit={props.addName}>\n        Name: <input\n          value={props.newName}\n          onChange={props.handleNewNameChange}\n        ></input>\n        Number: <input\n          value={props.newNumber}\n          onChange={props.handleNewNumberChange}\n        ></input>\n        <button type=\"submit\">add</button>\n      </form>\n    </div>\n  )\n}\n\nconst ShowNumbers = (props) => {\n  /* miksi täällä täytyy olla numberFilter() aaltosulkeilla,\n   mutta ylempänä SubmitFormissa ei handleissa tarvitse?? (tai ei pidä olla) --ilmeisesti event vs funktio */\n  console.log('ShowNum', props, 'ShowNum-persons', props.persons, 'ShowNum-nameFilt', props.nameFilter)\n  const numbersToFilter = props.numberFilter()\n  console.log('showNumFilter', numbersToFilter);\n  return (\n    <ul>\n      {numbersToFilter.map(person => {\n        return (\n          <div key={person.id}>\n            <li > {person.name} {person.number} </li>\n            <button onClick={() => props.removeName(person)} >remove </button>\n          </div>\n        )\n      })}\n    </ul>\n  )\n}\n\nconst Notification = ({ message, success }) => {\n  if (message === null) {\n    return null\n  }\n  if (success) {\n    return (\n      <div className='success'>\n        {message}\n      </div>\n    )\n  } else {\n    return (\n      <div className='error'>\n        {message}\n      </div>\n    )\n  }\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([\n    /*    { name: 'Arto Hellas', number: '0401231244', id: 1 },\n        { name: 'Ada Lovelace', number: '39-44-5323523', id: 2 },\n        { name: 'Dan Abramov', number: '12-43-234345', id: 3 },\n        { name: 'Mary Poppendieck', number: '39-23-6423122', id: 4 }\n        */\n  ])\n  const [newName, setNewName] = useState('add new name')\n  const [newNumber, setNewNumber] = useState('add new Number')\n  const [nameFilter, setFilter] = useState('')\n  const [errorMessage, setErrorMessage] = useState('testi')\n  const [success, setSuccess] = useState(true)\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(response => {\n        console.log('1.datahaku', response.data);\n        setPersons(response.data)\n      })\n  }, [])\n\n  const allreadyInBook = () => {\n    let inBook = false\n    persons.map(person => {\n      // ja tästä toivottavasti muistamme miten funktiota kutsutaan.......\n      console.log('Nimi:', person.name, 'newname', newName, 'ehto:', person.name === newName)\n      if (person.name === newName) {\n        inBook = true\n      }\n    })\n    return inBook\n  }\n\n  const getIdForName = (findName) => {\n    const p = persons.find(person =>\n      person.name === findName\n    )\n    return p.id\n  }\n\n  const addName = (event) => {\n    event.preventDefault()\n    const newObject = {\n      name: newName,\n      number: newNumber,\n    }\n\n    if (allreadyInBook()) {\n      if (window.confirm(`${newName} is already in the phonebook, \n      do you wish to replace the old number?`)) {\n        const idToChange = getIdForName(newName)\n        const changedPerson = { ...(persons.find(n => n.name === newName)), number: newNumber }\n        personService\n          .update(idToChange, changedPerson)\n          .then(response => {\n            setSuccess(true)\n            setErrorMessage(`Number for ${newName} replaced`)\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 3000)\n            setPersons(persons.map(p => p.id !== idToChange ? p : response.data))\n          })\n          .catch(() => {\n            setSuccess(false)\n            setErrorMessage(`Information has been deleted from the server, can't update ${newName}`)\n            setPersons(persons.filter(p => (p.id !== idToChange)))\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 3000\n            )\n          }\n          )\n      }\n    } else {\n      personService\n        .create(newObject)\n        .then(response => {\n          setSuccess(true)\n          setErrorMessage(`Added number for ${newName}`)\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 3000\n          )\n          setPersons(persons.concat(response.data))\n          setNewName('')\n          setNewNumber('')\n        })\n        .catch(error => {\n          setSuccess(false)\n          console.log('error logi', error.response.data.error);\n          setErrorMessage(error.response.data.error)\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 3000)\n        })\n    }\n  }\n\n  const removeName = (person) => {\n    console.log('removeName event', person)\n    if (window.confirm(`Remove ${person.name}`)) {\n      personService\n        .remove(person.id)\n        .then(() => {\n          setSuccess(true)\n          setErrorMessage(`Removed ${person.name}`)\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 3000\n          )\n          setPersons(\n            persons.filter(personOld =>\n              (personOld.id !== person.id)\n            )\n          )\n        }\n        )\n    }\n    /*   tää ei oikein toiminu, ehkä promise ongelma... \n    oli vielä \"pending\" kun kaatui .map ei ole funkkari virheeseen \n    setPersons(personService\n          .getAll()\n          .then(response => { setPersons(response.data) })\n        ) */\n  }\n\n  const handleNewNameChange = (event) => {\n    /*    console.log('value: ', event.target.value)\n        console.log('Name handler: ', event)\n    */\n    setNewName(event.target.value)\n  }\n\n  const handleNewNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    console.log('handleFilth', event.target.value)\n    setFilter(event.target.value)\n  }\n\n  const numberFilter = () => {\n    console.log('NumFilter-persons', persons, 'NumFilter-nameFilt', nameFilter)\n    if (nameFilter.length === 0) {\n      return persons\n    }\n    return persons.filter(person => person.name.toLocaleLowerCase().includes(nameFilter.toLocaleLowerCase()))\n    // ja nyt on näköjään vaikea tajuta että funktiosta voisi jotain palauttaakin..\n  }\n\n  return (\n    <div>\n      <Notification message={errorMessage} success={success} />\n      <h2>Phonebook</h2>\n      <Filter nameFilter={nameFilter} handleFilterChange={handleFilterChange} />\n      <h2>add a new number</h2>\n      <SubmitForm addName={addName} newName={newName} newNumber={newNumber}\n        handleNewNameChange={handleNewNameChange} handleNewNumberChange={handleNewNumberChange} />\n      <h2>Numbers</h2>\n      <ShowNumbers removeName={removeName} persons={persons} nameFilter={nameFilter} numberFilter={numberFilter} />\n    </div>\n  )\n\n}\n\nexport default App","C:\\Aarne\\Koulu\\fullstack\\osa2\\puhelinluettelo\\src\\reportWebVitals.js",[],"C:\\Aarne\\Koulu\\fullstack\\osa2\\puhelinluettelo\\src\\services\\persons.js",["25"],"import axios from 'axios'\r\n\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nconst create = newObject => {\r\n  return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject)\r\n}\r\n\r\nconst remove = (id) => {\r\n  return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nexport default {\r\n  getAll,\r\n  create,\r\n  update,\r\n  remove,\r\n}",{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":103,"column":24,"nodeType":"32","messageId":"33","endLine":103,"endColumn":26},{"ruleId":"34","severity":1,"message":"35","line":21,"column":1,"nodeType":"36","endLine":26,"endColumn":2},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]